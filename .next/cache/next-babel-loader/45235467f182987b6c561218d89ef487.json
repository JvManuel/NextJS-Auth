{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nvar _jsxFileName = \"/home/john_vincent/Next/nextjs-auth/utils/auth.js\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport { useEffect } from 'react';\nimport Router from 'next/router';\nimport nextCookie from 'next-cookies';\nimport cookie from 'js-cookie';\nexport const authenticate = token => {\n  cookie.set('token', token, {\n    expires: 1\n  });\n  Router.push('/profile');\n};\nexport const auth = ctx => {\n  const {\n    token\n  } = nextCookie(ctx);\n  /*\n   * If `ctx.req` is available it means we are on the server.\n   * Additionally if there's no token it means the user is not logged in.\n   */\n\n  if (ctx.req && !token) {\n    ctx.res.writeHead(302, {\n      Location: '/login'\n    });\n    ctx.res.end();\n  } // We already checked for server. This should only happen on client.\n\n\n  if (!token) {\n    Router.push('/login');\n  }\n\n  return token;\n};\nexport const logout = () => {\n  cookie.remove('token'); // to support logging out from all windows\n\n  window.localStorage.setItem('logout', _Date$now());\n  Router.push('/login');\n};\nexport const withAuthSync = WrappedComponent => {\n  const Wrapper = props => {\n    const syncLogout = event => {\n      if (event.key === 'logout') {\n        console.log('logged out from storage!');\n        Router.push('/login');\n      }\n    };\n\n    useEffect(() => {\n      window.addEventListener('storage', syncLogout);\n      return () => {\n        window.removeEventListener('storage', syncLogout);\n        window.localStorage.removeItem('logout');\n      };\n    }, [null]);\n    return __jsx(WrappedComponent, _extends({}, props, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    }));\n  };\n\n  Wrapper.getInitialProps = async ctx => {\n    const token = auth(ctx);\n    const componentProps = WrappedComponent.getInitialProps && (await WrappedComponent.getInitialProps(ctx));\n    return _objectSpread({}, componentProps, {\n      token\n    });\n  };\n\n  return Wrapper;\n};","map":{"version":3,"sources":["/home/john_vincent/Next/nextjs-auth/utils/auth.js"],"names":["useEffect","Router","nextCookie","cookie","authenticate","token","set","expires","push","auth","ctx","req","res","writeHead","Location","end","logout","remove","window","localStorage","setItem","withAuthSync","WrappedComponent","Wrapper","props","syncLogout","event","key","console","log","addEventListener","removeEventListener","removeItem","getInitialProps","componentProps"],"mappings":";;;;;;AAAA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA,OAAO,MAAMC,YAAY,GAAIC,KAAD,IAAW;AACrCF,EAAAA,MAAM,CAACG,GAAP,CAAW,OAAX,EAAoBD,KAApB,EAA2B;AAAEE,IAAAA,OAAO,EAAE;AAAX,GAA3B;AACAN,EAAAA,MAAM,CAACO,IAAP,CAAY,UAAZ;AACD,CAHM;AAKP,OAAO,MAAMC,IAAI,GAAGC,GAAG,IAAI;AACzB,QAAM;AAAEL,IAAAA;AAAF,MAAYH,UAAU,CAACQ,GAAD,CAA5B;AAEA;;;;;AAIA,MAAIA,GAAG,CAACC,GAAJ,IAAW,CAACN,KAAhB,EAAuB;AACrBK,IAAAA,GAAG,CAACE,GAAJ,CAAQC,SAAR,CAAkB,GAAlB,EAAuB;AAAEC,MAAAA,QAAQ,EAAE;AAAZ,KAAvB;AACAJ,IAAAA,GAAG,CAACE,GAAJ,CAAQG,GAAR;AACD,GAVwB,CAYzB;;;AACA,MAAI,CAACV,KAAL,EAAY;AACVJ,IAAAA,MAAM,CAACO,IAAP,CAAY,QAAZ;AACD;;AAED,SAAOH,KAAP;AACD,CAlBM;AAoBP,OAAO,MAAMW,MAAM,GAAG,MAAM;AAC1Bb,EAAAA,MAAM,CAACc,MAAP,CAAc,OAAd,EAD0B,CAE1B;;AACAC,EAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,QAA5B,EAAsC,WAAtC;AACAnB,EAAAA,MAAM,CAACO,IAAP,CAAY,QAAZ;AACD,CALM;AAOP,OAAO,MAAMa,YAAY,GAAGC,gBAAgB,IAAI;AAC9C,QAAMC,OAAO,GAAGC,KAAK,IAAI;AACvB,UAAMC,UAAU,GAAGC,KAAK,IAAI;AAC1B,UAAIA,KAAK,CAACC,GAAN,KAAc,QAAlB,EAA4B;AAC1BC,QAAAA,OAAO,CAACC,GAAR,CAAY,0BAAZ;AACA5B,QAAAA,MAAM,CAACO,IAAP,CAAY,QAAZ;AACD;AACF,KALD;;AAOAR,IAAAA,SAAS,CAAC,MAAM;AACdkB,MAAAA,MAAM,CAACY,gBAAP,CAAwB,SAAxB,EAAmCL,UAAnC;AAEA,aAAO,MAAM;AACXP,QAAAA,MAAM,CAACa,mBAAP,CAA2B,SAA3B,EAAsCN,UAAtC;AACAP,QAAAA,MAAM,CAACC,YAAP,CAAoBa,UAApB,CAA+B,QAA/B;AACD,OAHD;AAID,KAPQ,EAON,CAAC,IAAD,CAPM,CAAT;AASA,WAAO,MAAC,gBAAD,eAAsBR,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAP;AACD,GAlBD;;AAoBAD,EAAAA,OAAO,CAACU,eAAR,GAA0B,MAAMvB,GAAN,IAAa;AACrC,UAAML,KAAK,GAAGI,IAAI,CAACC,GAAD,CAAlB;AAEA,UAAMwB,cAAc,GAClBZ,gBAAgB,CAACW,eAAjB,KACC,MAAMX,gBAAgB,CAACW,eAAjB,CAAiCvB,GAAjC,CADP,CADF;AAIA,6BAAYwB,cAAZ;AAA4B7B,MAAAA;AAA5B;AACD,GARD;;AAUA,SAAOkB,OAAP;AACD,CAhCM","sourcesContent":["import { useEffect } from 'react'\nimport Router from 'next/router'\nimport nextCookie from 'next-cookies'\nimport cookie from 'js-cookie'\n\nexport const authenticate = (token) => {\n  cookie.set('token', token, { expires: 1 })\n  Router.push('/profile')\n}\n\nexport const auth = ctx => {\n  const { token } = nextCookie(ctx)\n\n  /*\n   * If `ctx.req` is available it means we are on the server.\n   * Additionally if there's no token it means the user is not logged in.\n   */\n  if (ctx.req && !token) {\n    ctx.res.writeHead(302, { Location: '/login' })\n    ctx.res.end()\n  }\n\n  // We already checked for server. This should only happen on client.\n  if (!token) {\n    Router.push('/login')\n  }\n\n  return token\n}\n\nexport const logout = () => {\n  cookie.remove('token')\n  // to support logging out from all windows\n  window.localStorage.setItem('logout', Date.now())\n  Router.push('/login')\n}\n\nexport const withAuthSync = WrappedComponent => {\n  const Wrapper = props => {\n    const syncLogout = event => {\n      if (event.key === 'logout') {\n        console.log('logged out from storage!')\n        Router.push('/login')\n      }\n    }\n\n    useEffect(() => {\n      window.addEventListener('storage', syncLogout)\n\n      return () => {\n        window.removeEventListener('storage', syncLogout)\n        window.localStorage.removeItem('logout')\n      }\n    }, [null])\n\n    return <WrappedComponent {...props} />\n  }\n\n  Wrapper.getInitialProps = async ctx => {\n    const token = auth(ctx)\n\n    const componentProps =\n      WrappedComponent.getInitialProps &&\n      (await WrappedComponent.getInitialProps(ctx))\n\n    return { ...componentProps, token }\n  }\n\n  return Wrapper\n}\n"]},"metadata":{},"sourceType":"module"}